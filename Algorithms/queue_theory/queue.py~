# -*- coding:utf-8 -*-
'''
Description : Check the data input 
require     : windows Anaconda-2.3.0
author      : qiangu_fang@163.com
usage  $ python sd_queue.py -c channel -n number -u service -d channel_cost -e customer_cost
'''
import os
import sys
import logging
import math
import pandas as pd
from pandas import Series
from optparse import OptionParser

# BASE_DIR = os.path.dirname(os.path.abspath(__file__))
# PAR_DIR = os.path.dirname(BASE_DIR)

# graph_network_logger = logging.getLogger('SD_API.Method.sd_graph_network')
# graph_network_logger.setLevel(logging.INFO)
# fh = logging.FileHandler(PAR_DIR + os.path.sep + "LOG" + os.path.sep + "SD_Graph_Network.log")
# fh.setLevel(logging.INFO)
# formatter = logging.Formatter('%(asctime)s %(filename)s[line:%(lineno)d] %(levelname)s %(message)s')
# fh.setFormatter(formatter)
# graph_network_logger.addHandler(fh)

"""
   c 通道数， n 平均到达， u 平均服务率, d 通道花费， e 顾客花费
   1.系统中无顾客的概率            P = 1 - n/u                
   2.平均排队的顾客数              L1 = (n^2)/(u*(u-n))
   3.系统中的平均顾客数            L2 = L1 + n/u
   4.顾客花在排队上的平均等待时间   W1 = L1/n
   5.顾客在系统中的平均逗留时间     W2 = W1 + 1/u
   6.顾客得不到及时服务必须排队等待的概率  P2 = n/u
   7.单位时间总成本                 C = c * d + L1 * e
   8.系统中恰好有 n 个顾客的概率           Pn = (P2)^n * P
"""

dicts = {"n":"平均到达率","u":"平均服务率","p":"系统中无顾客的概率","l1":"平均排队的顾客数","l2":"系统中的平均顾客数","w1":"顾客花在排队上的平均等待时间","w2":"顾客在系统中的平均逗留时间","p1":"顾客得不到及时服务必须排队等待的概率","cost":"单位时间总成本","m","服务时间的标准差"}
# def M_M_1(n, u, d, e):
#     p = 1 - n/u
#     l1 = (n**2)/(u*(u-n))
#     l2 = l1 + n/u
#     w1 = l1/n
#     w2 = w1 + 1/u
#     p1 = n/u

#     cost = c * d + l2 * e

#     pn = [(p1)**n*p for n in range(10)]

#     print(p,l1,l2,w1,w2,p1,cost,pn)

"""
1.系统中无顾客的概率       p = 1/(1/k! * (n/u)**k + 1/c! * 1/(1-n/(c*u)) * (n/u)**c)
2.平均排队的顾客数        l1 = (n/u)**c * n/(c*u)/(c!*(1-n/(c*u)**2))*p
3.系统中的平均顾客数      l2 = l1 + n/u
4.顾客花在排队上的平均等待时间    W1 = l1/n
5.顾客在系统中的平均逗留时间      W2 = w1 + 1/u
6.系统中顾客必须排队等待的概率     p2 = 1/c! * (n/u)**c * (c*u/(c*u-n))*p
7.单位时间总成本                 C = c * d + L1 * e
8.系统中恰好有 n 个顾客的概率      pn = (n/u)**n/n! * p     if n<=c
                               pn = (n/u)**n/(c!*(c**(n-c)) * p
"""

def M_M_C(c, n, u, d, e):
    x = 0
    for k in range(c):
        print(k)
        x += (1/math.factorial(k)) * ((n/u)**k)
    print(x)
    y = n/(c*u)
    print(1.0/(math.factorial(c)) * (1/(1-y)) * ((n/u)**c) )
    p = 1.0/(x + 1.0/(math.factorial(c)) * (1/(1-y)) * ((n/u)**c))
    l1 = (n/u)**c * y/(math.factorial(c)*(1-y)**2) * p
    l2 = l1 + n/u
    w1 = l1/n
    w2 = w1 + 1/u
    p1 = 1.0/math.factorial(c) * (n/u)**c * (c*u/(c*u-n))*p
    
    cost = c * d + l2 * e

    pn = []
    for i in range(10):
        if i<= c:
            pn.append(((n/u)**i)/(math.factorial(i)) * p )
        else:
            pn.append((n/u)**i/(math.factorial(c)*(c**(i-c)))* p)

    print(p,l1,l2,w1,w2,p1,cost,pn)


"""
单位时间顾客平均到达数n ，单位平均服务顾客数u，
 一个顾客的平均服务时间1/u ，服务时间的均方差m。
1.系统中无顾客的概率             p = 1 - n/u
2.平均排队的顾客数              l1 = 0.5*(n**2 * m**2 + (n/u)**2)/(1-n/u)                           
3.系统中的平均顾客数            l2 = l1 + n/u                       
4.顾客花在排队上的平均等待时间    w1 = l1/n       
5.在系统中顾客的平均逗留时间      w2 = w1 + 1/u       
6.系统中顾客必须排队等待的概率     p1 = n/u  
7.单位时间总成本                 C = c * d + L1 * e    
8.系统中恰好有 n 个顾客的概率     None
"""
def M_G_1(n, u, d, e, m):
    p = 1 - n/u
    l1 = 0.5*(n**2 * m**2 + (n/u)**2)/(1-n/u)
    l2 = l1 +n/u
    w1 = l1/n
    w2 = w1 + 1/u 
    p1 = n/u

    cost = c*d + l2*e

    print(p,l1,l2,w1,w2,p1,cost)   


"""
系统中恰好有 i 个顾客的概率Pn = ( (n/u)**i/i! ) / ( j from 0 to c sum(n/u)**j/j!)
"""
def M_G_C_C(c, n, u):
    a = sum([(n/u)**j/math.factorial(j) for j in range(c+1)])
    pn = []
    for i in range(c+1):
        pn.append((n/u)**i/math.factorial(i)/a)

    p = 1.0/a
    l1 = (n/u)/(1-(n/u)**c/math.factorial(c)/a)

    print(p, l1, pn)

def M_M_c_m(c, cn, n, u, d, e): 
   
    x = (cn*n)/(c*u)  

    a = sum([1.0/(math.factorial(k)*math.factorial(cn-k))*(c*x/cn)**k for k in range(c+1)])
    b = c**c/math.factorial(c) * sum([1.0/math.factorial(cn-k)*((x/cn)**k) for k in range(c+1, cn+1)])

    p = 1.0/(math.factorial(cn) *(a+b) )

    def Pn(cn, c, i, n, u, p):
        if  0<=i<=c:
            return math.factorial(cn)/(math.factorial(cn-i)*math.factorial(i)) * (n/u)**i * p
        elif c+1 <=i <= cn:
            return math.factorial(cn)/(math.factorial(cn-i)*math.factorial(c)*c**(i-c)) * (n/u)**i * p

    
    l2 = sum([i * Pn(cn, c, i, n, u) for i in range(1, cn+1)])
    l1 = sum([(i-c) * Pn(cn, c, i, n, u) for i in range(c+1, cn+1)])

    l = n*(cn - l1)

    w1 = l1/l
    w2 = l2/l

    cost = c*d + l2*e

    p1 = sum([Pn(cn, c, i, n, u) for i in range(c,cn+1)])

    pn = [Pn(cn, c, i, n, u) for i in range(0, cn+1)]

    print(p, l1, l2, w1, w2, cost, p1, pn)

def M_M_s(cn, c, n, u):
    x = n/(c*u)
    sum_a = sum([(c*x)**k/math.factorial(k) for k in range(c+1)])

    p = 1.0/(sum_a + c**c/math.factorial(c) * (x*(x**c-x**cn)/(1-x)))

    def Pn(c, x, i, p):
        if 0<=i<=c:
            return (c*x)**i/math.factorial(i) * p
        elif c<=i<=cn:
            return c**c/math.factorial(c) * (x**i) * p

    l1 = p*x*(c*x)**c/(math.factorial(c) * (1-x)**2) * (1 - x**(cn-c) - (cn-c) * x**(cn-c) * (1-x))
    print(Pn(c, x, cn, p))
    l2 = l1 + c*x*(1-Pn(c, x, cn, p))

    w1 = l1/n*(1-Pn(c, x, cn, p))
    w2 = w1 + 1.0/u
    
    pn = [Pn(c, x, i, p) for i in range(0, cn+1)]

    print(p, l1, l2, w1, w2, pn)

def main(method, c, n, u, d, e, m, cn):
    if method == "M_M_C":
        value, dicts = M_M_C(c, n, u, d, e)

    elif method == "M_G_1":
        value,dicts = M_G_1(n, u, d, e, m)

    elif method == "M_G_C_C":
        value,dicts = M_G_C_C(c, n, u)

    elif method == "M_M_c_m":
        # max_flow_min_cost(inFile,source,end)
        value, dicts = M_M_c_m(c, cn, n, u, d, e)

    elif method == "M_M_s":
        value, dicts = M_M_s(cn, c, n, u)

    else:graph_network_logger.info("Method not find")

    return value,dicts

if __name__ == "__main__":
    optparser = OptionParser()

    optparser.add_option('-a', '--method',
                         dest='method',
                         help='queue theory method',
                         default=None,
                         type="string")

    optparser.add_option('-c', '--channel',
                         dest='channels',
                         help='number of channels',
                         default=1,
                         type="int")

    optparser.add_option('-n', '--number',
                         dest='arrive',
                         help='average arrive rates',
                         default=None,
                         type="float")


    optparser.add_option('-u', '--service',
                         dest='service',
                         help='average service rates',
                         default=None,
                         type="float")

    optparser.add_option('-d', '--channel_cost',
                         dest='ch_cost',
                         help='Channel costs',
                         default=None,
                         type="float")

    optparser.add_option('-e', '--customer_cost',
                         dest='cu_cost',
                         help='customer cost',
                         default=None,
                         type="float")

    optparser.add_option('-m', '--mean_square',
                     dest='mean',
                     help='mean-square deviation',
                     default=None,
                     type="float")

    optparser.add_option('--cn', '--channel_number',
                     dest='cu_number',
                     help='customer numbers',
                     default=None,
                     type="int")

    (options, args) = optparser.parse_args()
    
    # if options.input is None:
    #         inFile = sys.stdin
    # elif options.input is not None:
    #         inFile = options.input
    # else:
    #         print 'No dataset filename specified, system with exit\n'
    #         sys.exit('System will exit')
    
   # graph_network_logger.info("Start,getting parameters")
    method = options.method
    c = options.channels
    n = options.arrive
    u = options.service
    d = options.ch_cost
    e = options.cu_cost
    m = options.mean
    cn = options.cu_number

   # M_M_1(n, u, d, e)

    M_M_C(c, n, u, d, e)

   # M_G_1(n, u, d, e, m)
   
   # M_G_C_C(c, n, u)
   
   # M_M_c_m(c, cn, n, u, d, e)
   # M_M_s(cn, c, n, u)
    
   # graph_network_logger.info("Computing...")
    # value, Result = main(inFile,m,s,e,d)
    # full_name = os.path.realpath(inFile)
    # pos = full_name.find(".txt")
    # result_name = full_name[:pos] +"_result.txt"

    # f = open(result_name, "w")
    # if m == "max_flow_min_cost":
    # 	f.write(str(value[0])+"\t"+str(value[1])+"\n")
    # else:
    #     f.write(str(value)+"\n")
    # f.close()

    # graph_network_logger.info("Saving data to file")
    
    # Result.to_csv(result_name,index = False, header=None,mode = "a", sep="\t")
